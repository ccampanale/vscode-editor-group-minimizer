{"version":3,"sources":["../webpack/bootstrap","../external \"vscode\"",".././src/extension.ts",".././src/editorGroupTreeDataProvider.ts",".././src/editorGroup.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","context","editorGroupTreeDataProvider","EditorGroupTreeDataProvider","vscode","window","registerTreeDataProvider","commands","registerCommand","group","minimize","remove","restore","subscriptions","push","cont","_onDidChangeTreeData","EventEmitter","onDidChangeTreeData","this","event","groups","workspaceState","length","parseInt","label","replace","fire","element","root","workspace","workspaceFolders","uri","path","documents","map","document","EditorGroup","fileName","Promise","resolve","showTextDocument","preserveFocus","preview","viewColumn","activeTextEditor","remaining","filter","mGroup","update","then","refresh","minimizedGroups","active","undefined","executeCommand","TreeItemCollapsibleState","Collapsed","doc","scheme","showInformationMessage","clear","TreeItem","collapsibleState","super","contextValue","des","_description","description","join","substr"],"mappings":"2BACE,IAAIA,EAAmB,GAGvB,SAASC,EAAoBC,GAG5B,GAAGF,EAAiBE,GACnB,OAAOF,EAAiBE,GAAUC,QAGnC,IAAIC,EAASJ,EAAiBE,GAAY,CACzCG,EAAGH,EACHI,GAAG,EACHH,QAAS,IAUV,OANAI,EAAQL,GAAUM,KAAKJ,EAAOD,QAASC,EAAQA,EAAOD,QAASF,GAG/DG,EAAOE,GAAI,EAGJF,EAAOD,QA0Df,OArDAF,EAAoBQ,EAAIF,EAGxBN,EAAoBS,EAAIV,EAGxBC,EAAoBU,EAAI,SAASR,EAASS,EAAMC,GAC3CZ,EAAoBa,EAAEX,EAASS,IAClCG,OAAOC,eAAeb,EAASS,EAAM,CAAEK,YAAY,EAAMC,IAAKL,KAKhEZ,EAAoBkB,EAAI,SAAShB,GACX,oBAAXiB,QAA0BA,OAAOC,aAC1CN,OAAOC,eAAeb,EAASiB,OAAOC,YAAa,CAAEC,MAAO,WAE7DP,OAAOC,eAAeb,EAAS,aAAc,CAAEmB,OAAO,KAQvDrB,EAAoBsB,EAAI,SAASD,EAAOE,GAEvC,GADU,EAAPA,IAAUF,EAAQrB,EAAoBqB,IAC/B,EAAPE,EAAU,OAAOF,EACpB,GAAW,EAAPE,GAA8B,iBAAVF,GAAsBA,GAASA,EAAMG,WAAY,OAAOH,EAChF,IAAII,EAAKX,OAAOY,OAAO,MAGvB,GAFA1B,EAAoBkB,EAAEO,GACtBX,OAAOC,eAAeU,EAAI,UAAW,CAAET,YAAY,EAAMK,MAAOA,IACtD,EAAPE,GAA4B,iBAATF,EAAmB,IAAI,IAAIM,KAAON,EAAOrB,EAAoBU,EAAEe,EAAIE,EAAK,SAASA,GAAO,OAAON,EAAMM,IAAQC,KAAK,KAAMD,IAC9I,OAAOF,GAIRzB,EAAoB6B,EAAI,SAAS1B,GAChC,IAAIS,EAAST,GAAUA,EAAOqB,WAC7B,WAAwB,OAAOrB,EAAgB,SAC/C,WAA8B,OAAOA,GAEtC,OADAH,EAAoBU,EAAEE,EAAQ,IAAKA,GAC5BA,GAIRZ,EAAoBa,EAAI,SAASiB,EAAQC,GAAY,OAAOjB,OAAOkB,UAAUC,eAAe1B,KAAKuB,EAAQC,IAGzG/B,EAAoBkC,EAAI,GAIjBlC,EAAoBA,EAAoBmC,EAAI,G,gBClFrDhC,EAAOD,QAAUkC,QAAQ,W,8ECAzB,aAEA,OAEA,oBAAyBC,GACvB,MAAMC,EAA8B,IAAI,EAAAC,4BAA4BF,GACpEG,EAAOC,OAAOC,yBAAyB,kBAAmBJ,GAC1DE,EAAOG,SAASC,gBAAgB,yCAA0CC,GAASP,EAA4BQ,YAC/GN,EAAOG,SAASC,gBAAgB,uCAAwCC,GAASP,EAA4BS,OAAOF,IACpHL,EAAOG,SAASC,gBAAgB,wCAAyCC,GAASP,EAA4BU,QAAQH,IAEtHR,EAAQY,cAAcC,KAAKZ,IAG7B,2B,8YCdA,aAEA,OAEA,oCAOE,YAAYa,GANL,KAAAC,qBAAqE,IAAIZ,EAAOa,aAC9E,KAAAC,oBAA6DC,KAAKH,qBAAqBI,MAGhG,KAAAX,MAAQ,EAGNU,KAAKlB,QAAUc,EACf,MAAMM,EAASF,KAAKlB,QAAQqB,eAAezC,IAAwB,mBACnEsC,KAAKV,MAAQY,GAAUA,EAAOE,OAAS,EACnCC,SAASH,EAAOA,EAAOE,OAAS,GAAGE,MAAMC,QAAQ,OAAQ,IAAK,IAAM,EACpE,EAGP,UACCP,KAAKH,qBAAqBW,OAG3B,YAAYC,GACT,OAAOA,EAGV,YAAYA,GACT,GAAIA,EAAS,CACX,MAAMC,EAAOzB,EAAO0B,UAAUC,iBAAmB3B,EAAO0B,UAAUC,iBAAiB,GAAGC,IAAIC,KAAO,GAC3FC,GAAaN,EAAQM,WAAa,IAAIC,IAAKC,GAAa,IAAI,EAAAC,YAAYD,EAASE,SAASZ,QAAWG,EAAH,IAAY,MACpH,OAAOU,QAAQC,QAAQN,GAClB,CACL,MAAMb,EAASF,KAAKlB,QAAQqB,eAAezC,IAAwB,mBACnE,OAAO0D,QAAQC,QAAQnB,IAIrB,QAAQZ,G,yCACZ,IAAK,MAAM2B,KAAY3B,EAAMyB,WAAa,SAClC9B,EAAOC,OAAOoC,iBAAiBL,EAAU,CAC7CM,eAAe,EACfC,SAAS,EACTC,WAAaxC,EAAOC,OAAOwC,kBAAoBzC,EAAOC,OAAOwC,iBAAiBD,YAAe,IAGjG,OAAOL,QAAQC,aAGjB,OAAO/B,GACL,MACMqC,GADkB3B,KAAKlB,QAAQqB,eAAezC,IAAwB,oBAAsB,IAChEkE,OAAQC,GAAWA,IAAWvC,GAChE,OAAOU,KAAKlB,QAAQqB,eAAe2B,OAAO,kBAAmBH,GAC1DI,KAAK,IAAM/B,KAAKgC,WAGf,W,yCACJ,MAAMjB,EAAY,GACZkB,EAAkBjC,KAAKlB,QAAQqB,eAAezC,IAAwB,oBAAsB,GAClG,IAAIwE,EAASjD,EAAOC,OAAOwC,iBAE3B,UAAkBS,IAAXD,GACLnB,EAAUpB,KAAKuC,aAAM,EAANA,EAAQjB,gBACjBhC,EAAOG,SAASgD,eAAe,sCACrCF,EAASjD,EAAOC,OAAOwC,iBAOzB,OAJAO,EAAgBtC,KAAK,IAAI,EAAAuB,YAAY,SAASlB,KAAKV,MAASL,EAAOoD,yBAAyBC,UAAWvB,EAAUa,OAAQW,GAC7F,SAAnBA,EAAI1B,IAAI2B,UAGVxC,KAAKlB,QAAQqB,eAAe2B,OAAO,kBAAmBG,GAC1DF,KAAK,KACJ9C,EAAOC,OAAOuD,uBAAuB,uBAAuBzC,KAAKV,OACjEU,KAAKV,QACLU,KAAKgC,eAIX,UACE,OAAOhC,KAAK0C,QAGd,QACE,OAAO1C,KAAKlB,QAAQqB,eAAe2B,OAAO,uBAAmBK,M,8ECpFjE,aAEA,MAAajB,UAAoBjC,EAAO0D,SAItC,YACkBrC,EACAsC,EACA7B,GAEhB8B,MAAMvC,EAAOsC,GAJG,KAAAtC,QACA,KAAAsC,mBACA,KAAA7B,YAGhBf,KAAK8C,aAAeF,GAAoB7B,EAAY,cAAgB,GAEpE,MAAMgC,EAAM/C,KAAKgD,aACjBhD,KAAKiD,YAAcF,EAAI3C,OAAS,EAAO2C,EAAIG,KAAK,MAAMC,OAAO,EAAG,IAA5B,MAAuC,GAG7E,cACE,MAAO,GAAGnD,KAAKgD,aAAaE,KAAK,MAGnC,mBACE,MAAMxC,EAAOzB,EAAO0B,UAAUC,iBAAmB3B,EAAO0B,UAAUC,iBAAiB,GAAGC,IAAIC,KAAO,GACjG,OAAQd,KAAKe,WAAa,IAAIC,IAAKC,GAAaA,EAASE,SAASZ,QAAWG,EAAH,IAAY,MAtB1F","file":"extension.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","module.exports = require(\"vscode\");","import * as vscode from 'vscode';\n\nimport { EditorGroupTreeDataProvider } from './editorGroupTreeDataProvider';\n\nexport function activate(context: vscode.ExtensionContext) {\n  const editorGroupTreeDataProvider = new EditorGroupTreeDataProvider(context);\n  vscode.window.registerTreeDataProvider('minimizedGroups', editorGroupTreeDataProvider);\n  vscode.commands.registerCommand('vscode-editor-group-minimizer.minimize', group => editorGroupTreeDataProvider.minimize());\n  vscode.commands.registerCommand('vscode-editor-group-minimizer.remove', group => editorGroupTreeDataProvider.remove(group));\n  vscode.commands.registerCommand('vscode-editor-group-minimizer.restore', group => editorGroupTreeDataProvider.restore(group));\n\n  context.subscriptions.push(editorGroupTreeDataProvider);\n}\n\nexport function deactivate() {}\n","import * as vscode from 'vscode';\n\nimport { EditorGroup } from './editorGroup';\n\nexport class EditorGroupTreeDataProvider implements vscode.TreeDataProvider<EditorGroup> {\n\tprivate _onDidChangeTreeData: vscode.EventEmitter<EditorGroup | undefined> = new vscode.EventEmitter<EditorGroup | undefined>();\n  readonly onDidChangeTreeData: vscode.Event<EditorGroup | undefined> = this._onDidChangeTreeData.event;\n  \n  context: vscode.ExtensionContext;\n  group = 1;\n\n  constructor(cont: vscode.ExtensionContext) {\n    this.context = cont;\n    const groups = this.context.workspaceState.get<Array<EditorGroup>>('minimizedGroups');\n    this.group = groups && groups.length > 0 \n      ? parseInt(groups[groups.length - 1].label.replace(/\\D+/g, ''), 10) + 1\n      : 1;\n  }\n\n\trefresh(): void {\n\t\tthis._onDidChangeTreeData.fire();\n\t}\n\n\tgetTreeItem(element: EditorGroup): vscode.TreeItem {\n    return element;\n  }\n\n\tgetChildren(element?: EditorGroup): Thenable<EditorGroup[] | undefined> {\n    if (element) {\n      const root = vscode.workspace.workspaceFolders ? vscode.workspace.workspaceFolders[0].uri.path : '';\n      const documents = (element.documents || []).map((document) => new EditorGroup(document.fileName.replace(`${root}/`, '')));\n      return Promise.resolve(documents);\n    } else {\n      const groups = this.context.workspaceState.get<Array<EditorGroup>>('minimizedGroups');\n      return Promise.resolve(groups);\n    }\n  }\n\n  async restore(group: EditorGroup): Promise<void> {\n    for (const document of group.documents || []) {\n      await vscode.window.showTextDocument(document, {\n        preserveFocus: true,\n        preview: false,\n        viewColumn: (vscode.window.activeTextEditor && vscode.window.activeTextEditor.viewColumn) || 1\n      });\n    }\n    return Promise.resolve();\n  }\n\n  remove(group: EditorGroup): Thenable<void> {\n    const minimizedGroups = this.context.workspaceState.get<Array<EditorGroup>>('minimizedGroups') || [];\n    const remaining = minimizedGroups.filter((mGroup) => mGroup !== group);\n    return this.context.workspaceState.update('minimizedGroups', remaining)\n      .then(() => this.refresh());\n  }\n\n  async minimize(): Promise<void> {\n    const documents = [];\n    const minimizedGroups = this.context.workspaceState.get<Array<EditorGroup>>('minimizedGroups') || [];\n    let active = vscode.window.activeTextEditor;\n\n    while (active !== undefined) {\n      documents.push(active?.document);\n      await vscode.commands.executeCommand('workbench.action.closeActiveEditor');\n      active = vscode.window.activeTextEditor;\n    }\n\n    minimizedGroups.push(new EditorGroup(`Group ${this.group}`, vscode.TreeItemCollapsibleState.Collapsed, documents.filter((doc) => {\n      return doc.uri.scheme === 'file';\n    })));\n\n    return this.context.workspaceState.update('minimizedGroups', minimizedGroups)\n      .then(() => {\n        vscode.window.showInformationMessage(`Minimized as: Group ${this.group}`);\n        this.group++;\n        this.refresh();\n      });\n  }\n\n  dispose(): Thenable<void> {\n    return this.clear();\n  }\n\n  clear(): Thenable<void> {\n    return this.context.workspaceState.update('minimizedGroups', undefined);\n  }\n}\n","import * as vscode from 'vscode';\n\nexport class EditorGroup extends vscode.TreeItem {\n  contextValue: string;\n  description: string;\n\n  constructor(\n    public readonly label: string,\n    public readonly collapsibleState?: vscode.TreeItemCollapsibleState,\n    public readonly documents?: vscode.TextDocument[]\n  ) {\n    super(label, collapsibleState);\n    this.contextValue = collapsibleState && documents ? 'editorGroup' : '';\n\n    const des = this._description;\n    this.description = des.length > 0 ? `${des.join(', ').substr(0, 30)}...` : '';\n  }\n\n  get tooltip(): string {\n    return `${this._description.join(', ')}`;\n  }\n  \n  private get _description(): string[] {\n    const root = vscode.workspace.workspaceFolders ? vscode.workspace.workspaceFolders[0].uri.path : '';\n    return (this.documents || []).map((document) => document.fileName.replace(`${root}/`, ''));\n  }\n}\n"],"sourceRoot":""}